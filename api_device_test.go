/*
 * dotcom-monitor
 *
 * dotcom-monitor API
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package dotcommonitor

import (
	"context"
	"net/http"
	"reflect"
	"testing"
)

func TestDeviceApiService_AddDevice(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx    context.Context
		device Device
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Result
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.AddDevice(tt.args.ctx, tt.args.device)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.AddDevice() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.AddDevice() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.AddDevice() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_DeleteDevice(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx      context.Context
		deviceId string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Result
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.DeleteDevice(tt.args.ctx, tt.args.deviceId)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.DeleteDevice() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.DeleteDevice() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.DeleteDevice() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_DisableDeviceAlert(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx               context.Context
		deviceId          string
		localVarOptionals *DisableDeviceAlertOpts
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Result
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.DisableDeviceAlert(tt.args.ctx, tt.args.deviceId, tt.args.localVarOptionals)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.DisableDeviceAlert() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.DisableDeviceAlert() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.DisableDeviceAlert() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_EditDevice(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx      context.Context
		deviceId string
		device   Device
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Result
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.EditDevice(tt.args.ctx, tt.args.deviceId, tt.args.device)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.EditDevice() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.EditDevice() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.EditDevice() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_GetDevice(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx      context.Context
		deviceId string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    interface{}
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.GetDevice(tt.args.ctx, tt.args.deviceId)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.GetDevice() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.GetDevice() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.GetDevice() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_GetDevicesPlataform(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx      context.Context
		platform string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []int32
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.GetDevicesPlataform(tt.args.ctx, tt.args.platform)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.GetDevicesPlataform() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.GetDevicesPlataform() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.GetDevicesPlataform() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDeviceApiService_GetTasks(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx      context.Context
		deviceId string
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []int32
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DeviceApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.GetTasks(tt.args.ctx, tt.args.deviceId)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeviceApiService.GetTasks() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DeviceApiService.GetTasks() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DeviceApiService.GetTasks() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}
