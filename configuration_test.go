/*
 * dotcom-monitor
 *
 * dotcom-monitor API
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package dotcommonitor

import (
	"context"
	"net/http"
	"reflect"
	"testing"
	"time"
)

func generateContextCanceled() context.Context {
	basicAuth := BasicAuth{UserName: "", Password: ""}
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Millisecond)
	ctx = context.WithValue(ctx, ContextBasicAuth, basicAuth)
	defer cancel()
	return ctx
}

func generateContextFakeAuth() context.Context {
	basicAuth := BasicAuth{UserName: "test", Password: "testshouldFail"}
	ctx, _ := context.WithTimeout(context.Background(), 60000*time.Millisecond)
	ctx = context.WithValue(ctx, ContextBasicAuth, basicAuth)
	return ctx
}

func generateConfigFake() *APIClient {
	return NewAPIClient(
		NewConfiguration(),
	)
}

func Test_contextKey_String(t *testing.T) {
	tests := []struct {
		name string
		c    contextKey
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.c.String(); got != tt.want {
				t.Errorf("contextKey.String() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewConfiguration(t *testing.T) {
	tests := []struct {
		name string
		want *Configuration
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewConfiguration(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewConfiguration() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestConfiguration_AddDefaultHeader(t *testing.T) {
	type fields struct {
		BasePath      string
		Host          string
		Scheme        string
		DefaultHeader map[string]string
		UserAgent     string
		HTTPClient    *http.Client
	}
	type args struct {
		key   string
		value string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &Configuration{
				BasePath:      tt.fields.BasePath,
				Host:          tt.fields.Host,
				Scheme:        tt.fields.Scheme,
				DefaultHeader: tt.fields.DefaultHeader,
				UserAgent:     tt.fields.UserAgent,
				HTTPClient:    tt.fields.HTTPClient,
			}
			c.AddDefaultHeader(tt.args.key, tt.args.value)
		})
	}
}
